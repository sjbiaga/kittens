1740834523923:import cats.*, cats.free.{ Trampoline => CatsTrampoline, * }, cats.arrow.*, cats.data.*, cats.syntax.all.*, cats.instances.all.*
1741770236886:import scala.util.parsing.combinator.JavaTokenParsers\ntype unit = Expr.Zero.type | Expr.One.type\nenum Expr[+T]:\n  case Add[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Sub[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Zero extends Expr[Nothing]\n  case Mul[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Div[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case One extends Expr[Nothing]\n  case Inv[+T](rhs: Expr[T]) extends Expr[T]\n  case Val[T](n: T) extends Expr[T]\nobject Expr extends JavaTokenParsers:\n  import Expr.*\n  def expr(implicit unit: unit): Parser[Expr[Int | Double]] =\n    term ~ rep(("+"|"-") ~ term) ^^ {\n      case lhs ~ rhs => rhs.foldLeft(lhs) {\n        case (lhs, "+" ~ rhs) => Add(lhs, rhs)\n        case (lhs, "-" ~ rhs) => Sub(lhs, rhs)\n      }\n    }\n\n  def term(implicit unit: unit): Parser[Expr[Int | Double]] =\n    factor ~ rep(("*"|"/") ~ factor) ^^ {\n      case lhs ~ rhs => rhs.foldLeft(lhs) {\n        case (lhs, "*" ~ rhs) => Mul(lhs, rhs)\n        case (lhs, "/" ~ rhs) => Div(lhs, rhs)\n      }\n    }\n\n  def factor(implicit unit: unit): Parser[Expr[Int | Double]] =\n    ("+"|"-") ~ literal ^^ {\n      case "-" ~ rhs if unit eq Zero => Inv(rhs)\n      case "+" ~ rhs => Add(Zero, rhs)\n      case "-" ~ rhs => Sub(Zero, rhs)\n    } |\n    literal\n\n  def literal(implicit unit: unit): Parser[Expr[Int | Double]] =\n    floatingPointNumber ^^ { n =>\n      try\n        n.toInt match\n          case 0 => Zero\n          case 1 => One\n          case n => Val(n)\n      catch _ =>\n        n.toDouble match\n          case 0d => Zero\n          case 1d => One\n          case n => Val(n)\n    } |\n    "("~> expr <~")"\n\n  implicit class ExprInterpolator(private val sc: StringContext) extends AnyVal:\n    def x(args: Any*)(implicit unit: unit): Expr[Int | Double] =\n      val inp = (sc.parts zip (args :+ "")).foldLeft("") {\n        case (r, (p, a)) => r + p + a\n      }\n      parseAll(expr, inp).get
1740834581344:import Expr.*
1740771199838:def eval(expr: Expr[Int | Double])(implicit unit: unit): Double =\n  expr match \n    case Zero => 0d\n    case One => 1d\n    case Val(n: Int) => n.toDouble\n    case Val(n: Double) => n\n    case Inv(n) if Zero eq unit => 0d - eval(n)\n    case Inv(n) if One eq unit => 1d / eval(n)\n    case Add(m, n) => eval(m) + eval(n)\n    case Sub(m, n) => eval(m) - eval(n)\n    case Mul(m, n) => eval(m) * eval(n)\n    case Div(m, n) => eval(m) / eval(n)
1740771205959:val swap: unit ?=> Expr ~> Expr =\n  new (Expr ~> Expr):\n    def apply[T](expr: Expr[T]): Expr[T] =\n      expr match\n        case Zero          => One\n        case One           => Zero\n        case Add(lhs, rhs) => Mul(apply(lhs), apply(rhs))\n        case Sub(lhs, rhs) => Div(apply(lhs), apply(rhs))\n        case Mul(lhs, rhs) => Add(apply(lhs), apply(rhs))\n        case Div(lhs, rhs) => Sub(apply(lhs), apply(rhs))\n        case Inv(Zero)\n          if summon[unit] eq One => apply(Div(One, Zero))\n        case Inv(rhs)      => Inv(apply(rhs))\n        case it            => it
1745815354898:final case class Builder[T](private val lhs: Expr[T], private var save: List[Expr[T]]):\n  def build: Expr[T] = lhs\n  def swapping(implicit unit: unit): Builder[T] = Builder(swap(lhs), save)\n  def add(rhs: Expr[T]): Builder[T] = Builder(Add(lhs, rhs), save)\n  def subtract(rhs: Expr[T]): Builder[T] = Builder(Sub(lhs, rhs), save)\n  def multiply(rhs: Expr[T]): Builder[T] = Builder(Mul(lhs, rhs), save)\n  def divide(rhs: Expr[T]): Builder[T] = Builder(Div(lhs, rhs), save)\n  def invert: Builder[T] = Builder(Inv(lhs), save)\n  def open: Builder.From[T] = Builder.From(build :: save)\n  def close(f: (Builder[T], Expr[T]) => Builder[T], invert: Boolean = false): Builder[T] =\n    val self = Builder(save.head, save.tail)\n    if invert then f(self, lhs).invert\n    else f(self, lhs)\nobject Builder:\n  def start[T] = From[T](Nil)\n  final case class From[T](save: List[Expr[T]]):\n    def apply(lhs: Expr[T]): Builder[T] = Builder(lhs, save)
1740771209246:given unit = One
1740747053767:given unit = Zero
1740771220574:x"1 / 0"
1740771224038:eval(x"1 / 0")
1740745333864:swap(x"1 / 0")
1740771228462:eval(swap(x"1 / 0"))
1740834785591:Builder.start(x"0")\n  .add(One)\n  .multiply(Val(5d))\n    .open(One)\n    .add(One)\n    .close(_.add(_))\n  .build
