1740769581608:import cats._, cats.free.{ Trampoline => CatsTrampoline, _}, cats.arrow._, cats.data._, cats.syntax.all._, cats.instances.all._
1740943815076:type unit = Expr.Zero.type | Expr.One.type\nenum Expr[+T]:\n  case Add[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Sub[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Zero extends Expr[Nothing]\n  case Mul[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Div[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case One extends Expr[Nothing]\n  case Inv[+T](rhs: Expr[T]) extends Expr[T]\n  case Val[T](n: T) extends Expr[T]
1740769626071:import Expr._
1741074718934:implicit val kittensExprFunctor: Functor[Expr] =\n  new Functor[Expr]:\n    def map[A, B](xa: Expr[A])(f: A => B): Expr[B] =\n      xa match\n        case Val(a)        => Val(f(a))\n        case Inv(rhs)      => Inv(map(rhs)(f))\n        case Add(lhs, rhs) => Add(map(lhs)(f), map(rhs)(f))\n        case Sub(lhs, rhs) => Sub(map(lhs)(f), map(rhs)(f))\n        case Mul(lhs, rhs) => Mul(map(lhs)(f), map(rhs)(f))\n        case Div(lhs, rhs) => Div(map(lhs)(f), map(rhs)(f))\n        case it @ ( Zero | One ) => it
1740769631560:def eval(expr: Expr[Int | Double])(implicit unit: unit): Double =\n  expr match \n    case Zero => 0d\n    case One => 1d\n    case Val(n: Int) => n.toDouble\n    case Val(n: Double) => n\n    case Inv(n) if Zero eq unit => 0d - eval(n)\n    case Inv(n) if One eq unit => 1d / eval(n)\n    case Add(m, n) => eval(m) + eval(n)\n    case Sub(m, n) => eval(m) - eval(n)\n    case Mul(m, n) => eval(m) * eval(n)\n    case Div(m, n) => eval(m) / eval(n)
1741772689573:val swap: Expr ~> Expr =\n  new (Expr ~> Expr):\n    def apply[T](expr: Expr[T]): Expr[T] =\n      expr match\n        case Zero          => One\n        case One           => Zero\n        case Add(lhs, rhs) => Mul(apply(lhs), apply(rhs))\n        case Sub(lhs, rhs) => Div(apply(lhs), apply(rhs))\n        case Mul(lhs, rhs) => Add(apply(lhs), apply(rhs))\n        case Div(lhs, rhs) => Sub(apply(lhs), apply(rhs))\n        case Inv(lhs)      => Inv(apply(lhs))\n        case it            => it
1741727045644:(Inv(Val(2)): Expr[Int]).map(_ / 2)
