1747395385601:val fib: Long => Long = { n =>\n  if n <= 1L\n  then\n    1L min (0L max n)\n  else\n    fib(n-1) + fib(n-2)\n}
1747399661864:fib(5)
1747399786660:def fix[A](f: (=> A) => A): A = {\n  lazy val loop: A = f(loop)\n  loop\n}
1747399790556:val fibF = fix[Long => Long] { fib =>\n  { n =>\n    if n <= 1L\n    then\n      1L min (0L max n)\n    else\n      fib(n-1) + fib(n-2)\n  }\n}
1747399794180:fibF(5)
1747403389636:import cats.Functor, cats.syntax.functor._
1747403342965:sealed trait ExprF[+R]\ncase class AddF[+R](lhs: R, rhs: R) extends ExprF[R]\ncase class SubF[+R](lhs: R, rhs: R) extends ExprF[R]\ncase object ZeroF extends ExprF[Nothing]\ncase class MulF[+R](lhs: R, rhs: R) extends ExprF[R]\ncase class DivF[+R](lhs: R, rhs: R) extends ExprF[R]\ncase object OneF extends ExprF[Nothing]\ncase class InvF[+R](rhs: R) extends ExprF[R]\ncase class ValF[T](n: T) extends ExprF[Nothing]\ncase class FacF[T, +R](n: R, k: T) extends ExprF[R]\n\nobject ExprF:\n  implicit def ExprFunctor: Functor[ExprF] =\n     new Functor[ExprF]:\n       override def map[A, B](xa: ExprF[A])(f: A => B): ExprF[B] =\n         xa match\n           case AddF(lhs, rhs) => AddF(f(lhs), f(rhs))\n           case SubF(lhs, rhs) => SubF(f(lhs), f(rhs))\n           case MulF(lhs, rhs) => MulF(f(lhs), f(rhs))\n           case DivF(lhs, rhs) => DivF(f(lhs), f(rhs))\n           case InvF(rhs)      => InvF(f(rhs))\n           case FacF(n, k)     => FacF(f(n), k)\n           case it @ (ValF(_) | ZeroF | OneF) => it
1747396628287:def eval(xa: ExprF[Long]): Long =\n  xa match\n    case AddF(lhs, rhs) => lhs + rhs\n    case SubF(lhs, rhs) => lhs - rhs\n    case MulF(lhs, rhs) => lhs * rhs\n    case DivF(lhs, rhs) => lhs / rhs\n    case InvF(rhs)      => 0 - rhs\n    case ValF(n: Long)  => n\n    case FacF(n, k: Long) => n * k\n    case ZeroF          => 0\n    case OneF           => 1
1747403363924:def factorial(n: Long): ExprF[Long] =\n  if n <= 0\n  then\n    OneF\n  else\n    FacF(n-1, n)
1747396613031:def fibonacci(n: Long): ExprF[Long] =\n  if n <= 1\n  then\n    ValF(1L min (0L max n))\n  else\n    AddF(n-1, n-2)
1747403351572:final case class Fix[F[_]](unfix: F[Fix[F]])
1747403391780:def ana[F[_]: Functor, A](f: A => F[A]): A => Fix[F] =\n  a => Fix(f(a) map ana(f))
1747396200768:def cata[F[_]: Functor, A](f: F[A] => A): Fix[F] => A =\n  fix => f(fix.unfix map cata(f))
1747403404004:ana(factorial).apply(5)
1747667210270:res0.unfix
1747667383822:res1 map cata(eval)
1747396630872:(ana(fibonacci) andThen cata(eval))(5)
1747735963030:import cats.{ Applicative, Eval, Functor }
1747735975519:def evalʹ(xa: ExprF[Eval[Long]])(implicit A: Applicative[Eval]): Eval[Long] =\n  xa match\n    case AddF(lhs, rhs)   => A.map2(lhs, rhs)(_ + _)\n    case SubF(lhs, rhs)   => A.map2(lhs, rhs)(_ - _)\n    case MulF(lhs, rhs)   => A.map2(lhs, rhs)(_ * _)\n    case DivF(lhs, rhs)   => A.map2(lhs, rhs)(_ / _)\n    case InvF(rhs)        => A.map(rhs)(0L - _)\n    case ValF(n: Long)    => A.pure(n)\n    case FacF(n, k: Long) => A.map(n)(_ * k)\n    case ZeroF            => A.pure(0L)\n    case OneF             => A.pure(1L)
1747735985870:final case class Fix[F[_]](unfix: F[Eval[Fix[F]]])
1747735997142:def ana[F[_]: Functor, A](f: A => F[A]): A => Eval[Fix[F]] =\n  anaEval(f andThen Eval.later)\ndef anaEval[F[_], A](f: A => Eval[F[A]])(implicit F: Functor[F]): A => Eval[Fix[F]] =\n  f(_).map(F.lift(anaEval(f)) andThen Fix.apply)
1747736025062:def cata[F[_], A](f: F[Eval[A]] => Eval[A])(implicit F: Functor[F]): Eval[Fix[F]] => Eval[A] =\n  _.flatMap(((_: Fix[F]).unfix) andThen F.lift(cata(f)) andThen f)
1747736065014:(ana(factorial) andThen cata(evalʹ))(5).value
