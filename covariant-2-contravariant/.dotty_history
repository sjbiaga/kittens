1743972175169:trait Consumer[-T] { def consume(t: T): Unit }
1743972185998:trait Producer[+T] { def produce: T }
1743972200446:trait Factory[T] extends Consumer[T] with Producer[T] { self =>\n  def contramap[S](f: S => T): Factory[S] =\n    new Factory[S] {\n      def consume(s: S): Unit = self.consume(f(s))\n      def produce: S = ???\n    }\n  def comap[U](g: T => U): Factory[U] =\n    new Factory[U] {\n      def consume(u: U): Unit = ???\n      def produce: U = g(self.produce)\n    }\n}
1743974887660:case class C(n: Int) extends Factory[Int] {\n  def consume(k: Int) = println(n + k)\n  def produce: Int = n\n}
1743974899828:C(1).contramap((_: String).toInt)
1743974957243:res0.consume("2")
1743975749179:C(4).comap(_ * 2)
1743975755219:res1.produce
1744004063524:trait Factory[-I, +O] extends Consumer[I] with Producer[O] { self =>\n  def contramap[A](f: A => I): Factory[A, O] =\n    new Factory[A, O] {\n      def consume(a: A) = self.consume(f(a))\n      def produce: O = self.produce\n    }\n  def comap[U](g: O => U): Factory[I, U] =\n    new Factory[I, U] {\n      def consume(i: I): Unit = self.consume(i)\n      def produce: U = g(self.produce)\n    }\n}
1744004828891:case class C(n: Int) extends Factory[Int, Int] {\n  def consume(k: Int) = println(n + k)\n  def produce: Int = n\n}
1744004844347:C(1).contramap((_: String).toInt)
1744004857515:res3.consume("2")
1744004862122:res3.produce
1744005332458:C(4).comap(_ * 2)
1744005350009:res5.consume(2)
1744005361729:res5.produce
1744006862686:import cats.arrow.Profunctor
1744036940968:trait Factory[-I, +O] extends Consumer[I] with Producer[O] { self =>\n  def contramap[A](f: A => I): Factory[A, O] = dimap(f)(identity)\n  def comap[U](g: O => U): Factory[I, U] = dimap[I, U](identity)(g)\n  def dimap[A, U](f: A => I)(g: O => U): Factory[A, U] =\n    new Factory[A, U]:\n      def consume(a: A): Unit = self.consume(f(a))\n      def produce: U = g(self.produce)\n}\n\nobject Factory {\n  implicit val kittensFactoryProfunctor: Profunctor[Factory] =\n    new Profunctor[Factory]:\n      def dimap[I, O, A, U](fa: Factory[I, O])(f: A => I)(g: O => U): Factory[A, U] =\n        fa.dimap(f)(g)\n}
1744009096691:case class C(n: Int) extends Factory[Int, Int] {\n  def consume(k: Int) = println(n + k)\n  def produce: Int = n\n}
1744009145227:Profunctor[Factory].dimap(C(4))((_: String).toInt)(_ * 2)
1744009159459:res7.consume("2")
1744009164067:res7.produce
1744016653074:import cats.syntax.profunctor._
1744016686066:C(4).lmap((_: String).toInt)
1744016703890:res9.consume("2")
1744016696290:C(4).rmap(_ * 2)
1744016708682:res10.produce
1744035686534:// Solution 01.1
1744035819091:import cats.arrow.Profunctor
1744036659237:trait Factoryʹ[-I, +O] { self =>\n  def process(i: I): O\n  def contramap[A](f: A => I): Factoryʹ[A, O] =\n    new Factoryʹ[A, O]:\n      def process(a: A): O = self.process(f(a))\n  def comap[U](g: O => U): Factoryʹ[I, U] =\n    new Factoryʹ[I, U]:\n      def process(i: I): U = g(self.process(i))\n}\n\nobject Factoryʹ {\n  implicit val kittensFactoryʹProfunctor: Profunctor[Factoryʹ] =\n    new Profunctor[Factoryʹ]:\n      def dimap[I, O, A, U](fa: Factoryʹ[I, O])(f: A => I)(g: O => U): Factoryʹ[A, U] =\n        new Factoryʹ[A, U]:\n          def process(a: A): U = g(fa.process(f(a)))\n}\n\ncase class Cʹ(n: Int) extends Factoryʹ[Int, String] {\n  def process(k: Int): String = (n + k).toString\n}
1744035865741:import cats.syntax.profunctor._
1744035855445:import Factoryʹ._
1744035858894:Cʹ(4).lmap((_: String).toInt)
1744035878533:res0.process("2")
1744035886941:Cʹ(4).rmap(_ * 2)
1744035898389:res2.process(3)
