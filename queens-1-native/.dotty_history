1740785246966:case object MaxSolutionsReached extends Throwable
1740785266008:type Coord[T] = (T, T)\nextension [T](row: T)\n  inline infix def x(col: T): Coord[T] = (row, col)\nextension [T](self: Coord[T])\n  inline def col: T = self._2\n  inline def row: T = self._1
1740805112351:case class Board(N: Int, private[Board] val squares: List[List[Boolean]]):\n  def this(squares: List[List[Boolean]]) = this(squares.size, squares)\n  require(squares.length == N && squares.forall(_.length == N))\n  def apply(i: Int)(j: Int): Boolean = squares(i)(j)\nimport scala.collection.mutable.Stack\ntype Point = Coord[Int]\ntype Solution = List[Point]\ntype PartialSolution = Stack[Point]\nimport scala.collection.Seq
1740805119031:class EmptyBoard(n: Int) extends Board(n, List.fill(n)(List.fill(n)(false))):\n  inline override def apply(i: Int)(j: Int): Boolean = false
1740805129471:val board = new EmptyBoard(4)
1740801636694:board(3)(3)
1740801937638:import scala.util.control.NonLocalReturns.{ returning, throwReturn => thr }\n\nobject Validator:\n\n  def apply(solution: Seq[Point])\n           (using board: Board): Boolean = returning:\n    for\n      n <- 0 until board.N\n      m <- (n + 1) until board.N\n      p = solution(n)\n      q = solution(m)\n    do\n      if false ||\n        p.row == q.row ||\n        p.col == q.col ||\n        p.row - p.col == q.row - q.col ||\n        p.row + p.col == q.row + q.col ||\n        false\n      then\n        thr(false)\n    true
1740802194941:def queens(using M: Long, board: Board): Unit =\n  val currentSolution: PartialSolution = scala.collection.mutable.Stack[Point]()\n  var maxSolutions = M\n  nqueens(board.N, 0 x 0)\n  def nqueens(k: Int, q: Point): Unit =\n    if q.row == board.N\n    then\n      return\n    else if k == 0\n    then\n      if Validator(currentSolution)\n      then\n        println(currentSolution.sorted)\n        maxSolutions -= 1\n        if maxSolutions == 0\n        then\n          throw MaxSolutionsReached\n      return\n    if q.col == board.N\n    then\n      nqueens(k, q.row + 1 x 0)\n    else\n      nqueens(k, q.row x q.col + 1)\n      if !board(q.row)(q.col)\n      then\n        currentSolution.push(q)\n        nqueens(k - 1, q.row x q.col + 1)\n        currentSolution.pop()
1741707404241:def pile_up(thunk: => Unit) = thunk
1741707423224:def queens(using M: Long, board: Board): Unit =\n  val currentSolution: PartialSolution = scala.collection.mutable.Stack[Point]()\n  var maxSolutions = M\n  nqueens(board.N, 0 x 0)\n  def nqueens(k: Int, q: Point): Unit =\n    if q.row == board.N\n    then\n      return\n    else if k == 0\n    then\n      if Validator(currentSolution)\n      then\n        println(currentSolution.sorted)\n        maxSolutions -= 1\n        if maxSolutions == 0\n        then\n          throw MaxSolutionsReached\n      return\n    if q.col == board.N\n    then\n      pile_up(nqueens(k, q.row + 1 x 0))\n    else\n      pile_up(nqueens(k, q.row x q.col + 1))\n      if !board(q.row)(q.col)\n      then\n        currentSolution.push(q)\n        pile_up(nqueens(k - 1, q.row x q.col + 1))\n        currentSolution.pop()
1741707440624:given Board = new EmptyBoard(4)
1741707445608:given Long = 2
1741707449887:try queens catch MaxSolutionsReached => ()
