1699370050448:import cats.syntax.invariant._
1699370903011:import cats.{ Eq, Monoid }
1740823151705:implicit def kittensMonoidForList[A: Monoid: Eq]: Monoid[List[A]] =\n  val M = implicitly[Monoid[A]]\n  val E = implicitly[Eq[A]]\n  M.imap { (it: A) => if E.eqv(it, M.empty) then (Nil: List[A]) else List[A](it) }\n         { (it: List[A]) => if it.isEmpty then M.empty else M.combineAll(it) }
1699370341245:import cats.syntax.monoid._
1699369771312:(Nil: List[Int]) |+| List(1)
1699369774177:(Nil: List[Int]) |+| List(0)
1699369783656:((Nil: List[Int]) |+| List(0)) eq Nil
1699369804448:(Nil: List[Int]) |+| List(0, 1, 3, 7)
1699370343373:(Nil: List[Int]) |+| List(0, 1, 3, 7)
1741881996234:import cats.instances.list._
1741882012688:import cats.syntax.foldable._
1741882025362:List(1, 2, 3).foldMap(identity)
1741882041583:List(1, 2, 3).foldMap(_.toString)
1741882945760:import cats.data.NonEmptyList
1741883600807:import cats.Endo
1741883794849:import cats.MonoidK
1741883796751:implicit val kittensEndoMonoid: MonoidK[Endo] =\n  new MonoidK[Endo]:\n    def combineK[A](f: A => A, g: A => A): A => A = f andThen g\n    def empty[A]: A => A = identity
1741883855630:NonEmptyList.fromListUnsafe(List[Int => Int](_.+(1), _.*(2))).reduce(kittensEndoMonoid.algebra).apply(3)
