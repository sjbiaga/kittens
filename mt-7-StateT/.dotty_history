1746008078506:import cats.data.State
1746008090779:type Stateʹ = State[(Int, Double), Double]
1746008130603:def avg(d: Double): Stateʹ =\n  State {\n    case (count: Int, sum: Double) =>\n      ((count + 1, sum + d), (sum + d) / (count + 1))\n  }
1746008154106:def add(d: Double, t: LazyList[Stateʹ] = LazyList.empty): LazyList[Stateʹ] = avg(d) #:: t
1746008192818:add(1, add(10, add(100, add(1000))))
1746008581482:res0.foldLeft(0 -> 0.0 -> Double.NaN) { case ((state, _), node) => node.run(state).value }
1746009266808:res0.foldLeft(res1) { case ((state, _), node) => node.run(state).value }
1746009467175:add(5, add(10, add(20, add(25))))
1746009536423:res3.foldLeft(res2) { case ((state, _), node) => node.run(state).value }
1746013308012:import scala.util.Random.nextDouble
1746013986219:type Stateʹʹ = State[(Int, Double, LazyList[Double]), Double]
1746013999003:val avg: Stateʹʹ =\n  State {\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746014006577:def inf: LazyList[Double] = nextDouble #:: inf
1746014028154:inf.take(10).foldLeft(avg.run((0, 0.0, inf))) { case (state, _) => avg.run(state.value._1) }
1746015138481:inf.take(10).foldLeft(avg.run(res5._1)) { case (state, _) => avg.run(state.value._1) }
1746019950728:def avgʹ(size: Int, cb: Double => Unit): Stateʹʹ =\n  State {\n    case (0, _, d #:: t) =>\n      ((1, d, t), d)\n    case (`size`, sum, d #:: t) =>\n      cb(sum / size)\n      ((1, d, t), d)\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (`size`, sum, nil) =>\n      cb(sum / size)\n      ((0, Double.NaN, nil), Double.NaN)\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746017421513:val avg = avgʹ(4, println)
1746017430464:inf.take(10).foldLeft(avg.run((0, Double.NaN, inf))) { case (state, _) => avg.run(state.value._1) }
1746018017769:inf.take(4).foldLeft(avg.run((0, Double.NaN, inf))) { case (state, _) => avg.run(state.value._1) }
