1746271127829:import cats.data.{ EitherT, OptionT, IndexedStateT }
1746270126682:type EitherTʹ[A] = EitherT[List, String, A]\ntype OptionTʹ[A] = OptionT[EitherTʹ, A]\ntype StateTʹ[S, A] = IndexedStateT[OptionTʹ, S, S, A]
1746270504562:EitherT(List(Right(0))): EitherTʹ[Int]
1746270526666:OptionT(EitherT(List(Right(Some(1))))): OptionTʹ[Int]
1746270554842:IndexedStateT(x => OptionT(EitherT(List(Right(Some(x -> x*x)))))): StateTʹ[Int, Int]
1746270854981:res2.runF
1746271153237:res2.run(2)
1746271325669://
1746008078506:import cats.data.State
1746008090779:type Stateʹ = State[(Int, Double), Double]
1746008130603:def avg(d: Double): Stateʹ =\n  State {\n    case (count: Int, sum: Double) =>\n      ((count + 1, sum + d), (sum + d) / (count + 1))\n  }
1746008154106:def add(d: Double, t: LazyList[Stateʹ] = LazyList.empty): LazyList[Stateʹ] = avg(d) #:: t
1746008192818:add(1, add(10, add(100, add(1000))))
1746008581482:res0.foldLeft(0 -> 0.0 -> Double.NaN) { case ((state, _), node) => node.run(state).value }
1746009266808:res0.foldLeft(res1) { case ((state, _), node) => node.run(state).value }
1746009467175:add(5, add(10, add(20, add(25))))
1746009536423:res3.foldLeft(res2) { case ((state, _), node) => node.run(state).value }
1746013308012:import scala.util.Random.nextDouble
1746013986219:type Stateʹ = State[(Int, Double, LazyList[Double]), Double]
1746013999003:val avg: Stateʹ =\n  State {\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746014006577:def inf: LazyList[Double] = nextDouble #:: inf
1746014028154:inf.take(10).foldLeft(avg.run((0, 0.0, inf))) { case (state, _) => avg.run(state.value._1) }
1746015138481:inf.take(10).foldLeft(avg.run(res5._1)) { case (state, _) => avg.run(state.value._1) }
1746019950728:def avgʹ(size: Int, cb: Double => Unit): Stateʹ =\n  State {\n    case (0, _, d #:: t) =>\n      ((1, d, t), d)\n    case (`size`, sum, d #:: t) =>\n      cb(sum / size)\n      ((1, d, t), d)\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (`size`, sum, nil) =>\n      cb(sum / size)\n      ((0, Double.NaN, nil), Double.NaN)\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746017421513:val avg = avgʹ(4, println)
1746017430464:inf.take(10).foldLeft(avg.run((0, Double.NaN, inf))) { case (state, _) => avg.run(state.value._1) }
1746018017769:inf.take(4).foldLeft(avg.run((0, Double.NaN, inf))) { case (state, _) => avg.run(state.value._1) }
1746182811010:// Exercise
1746183084482:type Stateʹ[A] = State[(Int, A, LazyList[A]), A]
1746183127890:def avgʹ(size: Int, cb: Double => Unit): Stateʹ[Double] =\n  State {\n    case (0, _, d #:: t) =>\n      ((1, d, t), d)\n    case (`size`, sum, d #:: t) =>\n      cb(sum / size)\n      ((1, d, t), d)\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (`size`, sum, nil) =>\n      cb(sum / size)\n      ((0, Double.NaN, nil), Double.NaN)\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746183140282:val avg = avgʹ(3, println)
1746183215050:def inf(n: Int = 1): LazyList[Int] = n #:: inf(n + 1)
1746183235378:avg.contramap[(Int, Int, LazyList[Int])] { case (count, sum, list) => (count, sum.toDouble, list.map(_.toDouble)) }
1746183275042:inf().take(10).foldLeft(res0.run((0, Int.MinValue, inf()))) {\n  case (state, _) =>\n    val ((count, sum, list), _) = state.value\n    res0.run((count, sum.toInt, list.map(_.toInt)))\n}
1746177140476:// Exercise
1746177217959:import cats._, cats.data._
1746184491673:extension [F[_], SA, SB, A](self: IndexedStateT[F, SA, SB, A])\n  def imap[SC](f: SB => SC)(g: SC => SB)(implicit F: Functor[F], I: Invariant[F]): IndexedStateT[F, SA, SC, A] =\n    IndexedStateT.applyF {\n      F.map(self.runF) {\n        AndThen(_) andThen {\n          I.imap(_) { case (sb, a) => (f(sb), a) } { case (sc, a) => (g(sc), a) }\n        }\n      }\n    }
1746186086800:def avgʹ(size: Int, cb: Double => Unit): State[(Int, Double, LazyList[Double]), Double] =\n  State {\n    case (0, _, d #:: t) =>\n      ((1, d, t), d)\n    case (`size`, sum, d #:: t) =>\n      cb(sum / size)\n      ((1, d, t), d)\n    case (count, sum, d #:: t) =>\n      ((count + 1, sum + d, t), (sum + d) / (count + 1))\n    case (`size`, sum, nil) =>\n      cb(sum / size)\n      ((0, Double.NaN, nil), Double.NaN)\n    case (count, sum, nil) =>\n      ((count, sum, nil), sum / count)\n  }
1746186100704:case class Avg(count: Int, sum: Double, list: LazyList[Double])
1746186107624:def avgʹʹ(size: Int, cb: Double => Unit): State[Avg, Double] =\n  State {\n    case Avg(0, _, d #:: t) =>\n      (Avg(1, d, t), d)\n    case Avg(`size`, sum, d #:: t) =>\n      cb(sum / size)\n      (Avg(1, d, t), d)\n    case Avg(count, sum, d #:: t) =>\n      (Avg(count + 1, sum + d, t), (sum + d) / (count + 1))\n    case Avg(`size`, sum, nil) =>\n      cb(sum / size)\n      (Avg(0, Double.NaN, nil), Double.NaN)\n    case Avg(count, sum, nil) =>\n      (Avg(count, sum, nil), sum / count)\n  }
1746186117160:val avg = avgʹ(3, println)
1746186120272:val AVG = avgʹʹ(3, println)
1746186126112:avg.imap(Avg.apply) { it => (it.count, it.sum, it.list) }
1746186129840:AVG.imap { it => (it.count, it.sum, it.list) } (Avg.apply)
1746186199407:for\n  x <- res0\n  y <- res1\nyield\n  (x, y)
1746187685366:def inf(n: Double = 1.0): LazyList[Double] = n #:: inf(n + 1)
1746186215551:inf().take(10).foldLeft(res2.run((0, Double.NaN, inf()))) { case (state, _) => res2.run(state.value._1) }
1746187873694:res3.value
