1747479516616:import cats._, cats.instances.function._
1747479660438:Defer[[T] =>> Function1[Int, T]].fix[Int] { (m: Int => Int) => { (n: Int) => m(n-4) } }
1747479671389:res0(7)
1747479846069:Defer[[T] =>> Function1[Int, T]].fix[Int] { (m: Int => Int) => { (n: Int) => if n <= 0 then n else m(n-4) } }
1747479854221:res2(7)
1747479989701:def m(f: Eval[Int => Int]): Eval[Int => Int] = Eval.now { n => f.value(n) }
1747479995157:Defer[Eval].fix[Int => Int](m)
1747480073053:res4.value(7)
1747480100181:def m(f: Eval[Int => Int]): Eval[Int => Int] = Eval.now { n => if n <= 0 then n else f.value(n-4) }
1747480104261:Defer[Eval].fix[Int => Int](m)
1747480110981:res6.value(7)
1747580204045:def recursiveFnʹ[F[_], A, B](fn: (A => F[B]) => (A => F[B])): A => F[B] =\n  new Function1[A, F[B]] {\n    def apply(a: A): F[B] = fn(this)(a)\n  }
1747579193397:val factorial: Long => Eval[Long] = Defer[Eval].recursiveFn {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        Eval.now(1L)\n      else\n        Eval.later(n * fac(n-1).value)\n  }\n}
1747580222401:val factorialʹ: Long => Eval[Long] = recursiveFnʹ {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        Eval.now(1L)\n      else\n        Eval.later(n * fac(n-1).value)\n  }\n}
1747580237372:factorialʹ(10000).value
1747580240900:factorial(10000).value
1747580362396:val factorial: Long => Eval[Long] = Defer[Eval].recursiveFn {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        Eval.now(1L)\n      else\n        for\n          k <- fac(n-1)\n        yield\n          n * k\n  }\n}
1747580349484:val factorialʹ: Long => Eval[Long] = recursiveFnʹ {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        Eval.now(1L)\n      else\n        for\n          k <- fac(n-1)\n        yield\n          n * k\n  }\n}
1747581066907:val factorialʹʹ: Long => Eval[Long] = recursiveFnʹ {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        Eval.now(1L)\n      else\n        for\n          _ <- Eval.Unit\n          k <- fac(n-1)\n        yield\n          n * k\n  }\n}
1747585997734:val factorialʹʹʹ: Long => Function1[Long, Long] = Defer[[T] =>> Function1[Long, T]].recursiveFn {\n  fac => {\n    n =>\n      if n <= 0\n      then\n        identity\n      else\n        for\n          _ <- Monad[[T] =>> Function1[Long, T]].unit\n          k <- fac(n-1)\n        yield\n          n * k\n  }\n}
1747586293197:factorialʹʹʹ(10000)(1)
1747588835995:val fibonacci: Long => Eval[Long] = Defer[Eval].recursiveFn {\n  fib => {\n    n =>\n      if n <= 1\n      then\n        Eval.now(1L min (0L max n))\n      else\n        for\n          p <- fib(n-1)\n          q <- fib(n-2)\n        yield\n          p + q\n  }\n}
