1746023951847:import cats._, cats.data._
1746023955759:import cats.instances.option._
1746023967921:extension [F[_], A, B](self: EitherT[F, A, B])\n  def flatten[D](implicit F: Monad[F], ev: B <:< EitherT[F, A, D]): EitherT[F, A, D] =\n    self.flatMap(ev)\n  def flattenʹ[D](implicit F: Monad[F], ev: B <:< F[D]): EitherT[F, A, D] =\n    self.semiflatMap(ev)\n  def flattenF[D](implicit F: Monad[F], ev: B <:< F[Either[A, D]]): EitherT[F, A, D] =\n    EitherT {\n      F.flatMap(self.value) {\n        case Left(a)  => F.pure(Left(a))\n        case Right(b) => ev(b)\n      }\n    }
1746023980160:EitherT(Option(Right(EitherT(Option(Right(1)))))).flatten
1746023985847:EitherT(Option(Right(Option(1)))).flattenʹ
1746023993311:EitherT(Option(Right(Option(Right(1))))).flattenF
