1740950021336:import algebra.ring.*
1741770236886:import scala.util.parsing.combinator.JavaTokenParsers\ntype unit = Expr.Zero.type | Expr.One.type\nenum Expr[+T]:\n  case Add[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Sub[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Zero extends Expr[Nothing]\n  case Mul[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case Div[+T](lhs: Expr[T], rhs: Expr[T]) extends Expr[T]\n  case One extends Expr[Nothing]\n  case Inv[+T](rhs: Expr[T]) extends Expr[T]\n  case Val[T](n: T) extends Expr[T]\nobject Expr extends JavaTokenParsers:\n  import Expr.*\n  def expr(implicit unit: unit): Parser[Expr[Int | Double]] =\n    term ~ rep(("+"|"-") ~ term) ^^ {\n      case lhs ~ rhs => rhs.foldLeft(lhs) {\n        case (lhs, "+" ~ rhs) => Add(lhs, rhs)\n        case (lhs, "-" ~ rhs) => Sub(lhs, rhs)\n      }\n    }\n\n  def term(implicit unit: unit): Parser[Expr[Int | Double]] =\n    factor ~ rep(("*"|"/") ~ factor) ^^ {\n      case lhs ~ rhs => rhs.foldLeft(lhs) {\n        case (lhs, "*" ~ rhs) => Mul(lhs, rhs)\n        case (lhs, "/" ~ rhs) => Div(lhs, rhs)\n      }\n    }\n\n  def factor(implicit unit: unit): Parser[Expr[Int | Double]] =\n    ("+"|"-") ~ literal ^^ {\n      case "-" ~ rhs if unit eq Zero => Inv(rhs)\n      case "+" ~ rhs => Add(Zero, rhs)\n      case "-" ~ rhs => Sub(Zero, rhs)\n    } |\n    literal\n\n  def literal(implicit unit: unit): Parser[Expr[Int | Double]] =\n    floatingPointNumber ^^ { n =>\n      try\n        n.toInt match\n          case 0 => Zero\n          case 1 => One\n          case n => Val(n)\n      catch _ =>\n        n.toDouble match\n          case 0d => Zero\n          case 1d => One\n          case n => Val(n)\n    } |\n    "("~> expr <~")"\n\n  implicit class ExprInterpolator(private val sc: StringContext) extends AnyVal:\n    def x(args: Any*)(implicit unit: unit): Expr[Int | Double] =\n      val inp = (sc.parts zip (args :+ "")).foldLeft("") {\n        case (r, (p, a)) => r + p + a\n      }\n      parseAll(expr, inp).get
1740950040575:import Expr.*
1740950048111:type Id[T] = T\ntype Pair[T] = (T, T)
1740950062759:trait FunctionKʹ[R[_], F[_], G[_]]:\n  def apply[A: R](fa: F[A]): G[A]\ntype FunctionK[F[_], G[_]] = FunctionKʹ[Id, F, G]\ntype ~>[F[_], G[_]] = FunctionK[F, G]
1740977326879:implicit def id[T]: Id[T] = null.asInstanceOf[Id[T]]
1741805693900:val swap: unit ?=> Expr ~> Expr =\n  new (Expr ~> Expr):\n    def apply[T: Id](expr: Expr[T]): Expr[T] =\n      expr match\n        case Zero          => One\n        case One           => Zero\n        case Add(lhs, rhs) => Mul(apply(lhs), apply(rhs))\n        case Sub(lhs, rhs) => Div(apply(lhs), apply(rhs))\n        case Mul(lhs, rhs) => Add(apply(lhs), apply(rhs))\n        case Div(lhs, rhs) => Sub(apply(lhs), apply(rhs))\n        case Inv(Zero)\n          if summon[unit] eq One => apply(Div(One, Zero))\n        case Inv(rhs)      => Inv(apply(rhs))\n        case it            => it
1740950096127:implicit val kittensDoubleRing: Ring[Double] =\n  new DivisionRing[Double]:\n    override val zero = 0d\n    override val one = 1d\n    override def negate(n: Double) = 0d - n\n    override def reciprocal(n: Double) = 1d / n\n    override def plus(m: Double, n: Double) = m + n\n    override def minus(m: Double, n: Double) = m - n\n    override def times(m: Double, n: Double) = m * n\n    override def div(m: Double, n: Double) = m / n
1740950103599:def evalʹ[A](expr: Expr[A])(implicit R: DivisionRing[A], unit: unit): A =\n  expr match \n    case Zero      => R.zero\n    case One       => R.one\n    case Val(v)    => v\n    case Inv(n) if unit eq Zero => R.negate(n)\n    case Inv(n) if unit eq One  => R.reciprocal(n)\n    case Add(m, n) => R.plus(m, n)\n    case Mul(m, n) => R.times(m, n)\n    case Sub(m, n) => R.minus(m, n)\n    case Div(m, n) => R.div(m, n)
1740977514407:val eval: unit ?=> FunctionKʹ[Ring, Expr, Pair] =\n  new FunctionKʹ[Ring, Expr, Pair]:\n    def apply[A: Ring](xa: Expr[A]): (A, A) =\n      given DivisionRing[A] = implicitly[Ring[A]].asInstanceOf[DivisionRing[A]]\n      evalʹ(xa) -> evalʹ(swap(xa)(using if summon[unit] eq Zero then One else Zero))
1745816065989:final case class Builder[T](lhs: Expr[T], private var save: List[Expr[T]]):\n  def fill(n: Int)(rhs: Expr[T]) = List.fill(0 max n)(rhs)\n  def swapping(implicit unit: unit) = Builder(swap(lhs), save)\n  def add(rhs: Expr[T], n: Int = 1) = Builder(fill(n)(rhs).foldLeft(lhs)(Add(_, _)), save)\n  def subtract(rhs: Expr[T], n: Int = 1) = Builder(fill(n)(rhs).foldLeft(lhs)(Sub(_, _)), save)\n  def multiply(rhs: Expr[T], n: Int = 1) = Builder(fill(n)(rhs).foldLeft(lhs)(Mul(_, _)), save)\n  def divide(rhs: Expr[T], n: Int = 1) = Builder(fill(n)(rhs).foldLeft(lhs)(Div(_, _)), save)\n  def invert(n: Int = 1): Builder[T] = Builder(List.fill(0 max n)(()).foldLeft(lhs) { (lhs, _) => Inv(lhs) }, save)\n  def open = Builder.From(lhs :: save)\n  def close(f: (Builder[T], Expr[T]) => Builder[T], invert: Int = 0) =\n    val self = Builder(save.head, save.tail)\n    f(self, lhs).invert(invert)\nobject Builder:\n  def start[T] = From[T](Nil)\n  final case class From[T](save: List[Expr[T]]):\n    def apply(lhs: Expr[T]): Builder[T] = Builder(lhs, save)
1740950341735:Builder.start(x"0")\n  .add(One)\n  .multiply(Val(5d), 4)\n    .open(One)\n    .add(One, 2)\n    .close(_.add(_))\n  .swapping\n  .lhs
1740950352246:res0.asInstanceOf[Expr[Double]]
1740950404174:given unit = One
1740950405054:eval(res1)
